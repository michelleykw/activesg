{"ast":null,"code":"var _jsxFileName = \"/Users/kagurayuuki/Documents/AY202122/Sem2/CS4249 HCI/activesg/frontend/src/components/CalendarCardNew.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { sendNetworkLog } from '../logging/logging.js';\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { CardActionArea } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ScrollCalendarCardNew(_ref) {\n  _s();\n\n  let {\n    date,\n    selectedDate,\n    setSelectedDate,\n    setSelectedTime\n  } = _ref;\n  const currDate = date;\n  const day = new Date(date + ' 2022').toLocaleString('en-us', {\n    weekday: 'short'\n  });\n  const location = useLocation();\n  const versionId = new URLSearchParams(location.search).get('version') || 1;\n\n  const handleCalendarCardClick = currDate => {\n    sendNetworkLog('Clicked on: ' + currDate, currDate + ' card', '', versionId);\n\n    if (selectedDate === currDate) {\n      setSelectedDate('');\n    } else {\n      setSelectedDate(currDate);\n    }\n\n    setSelectedTime('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        justifyContent: 'center',\n        minWidth: '60px',\n        m: '5px'\n      },\n      style: {\n        border: \"none\",\n        boxShadow: \"none\",\n        backgroundColor: currDate === selectedDate ? '#CA1E1E' : '#FFFFFF'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n        onClick: () => handleCalendarCardClick(currDate),\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          sx: {\n            padding: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            direction: \"column\",\n            container: true,\n            justify: \"center\",\n            alignItems: \"center\",\n            sx: {\n              color: currDate === selectedDate ? '#FFFFFF' : 'text.primary',\n              flexShrink: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: [\" \", currDate.split(' ')[0]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(ScrollCalendarCardNew, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = ScrollCalendarCardNew;\nexport default ScrollCalendarCardNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollCalendarCardNew\");","map":{"version":3,"sources":["/Users/kagurayuuki/Documents/AY202122/Sem2/CS4249 HCI/activesg/frontend/src/components/CalendarCardNew.jsx"],"names":["React","sendNetworkLog","useNavigate","useLocation","Typography","Grid","Box","Divider","Card","CardContent","CardActionArea","ScrollCalendarCardNew","date","selectedDate","setSelectedDate","setSelectedTime","currDate","day","Date","toLocaleString","weekday","location","versionId","URLSearchParams","search","get","handleCalendarCardClick","justifyContent","minWidth","m","border","boxShadow","backgroundColor","padding","color","flexShrink","split"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { sendNetworkLog } from '../logging/logging.js';\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { CardActionArea } from '@mui/material';\n\n\nfunction ScrollCalendarCardNew ({date, selectedDate, setSelectedDate, setSelectedTime}) {\n\n    const currDate = date;\n    const day = new Date(date + ' 2022').toLocaleString('en-us', {weekday:'short'})\n\n    const location = useLocation();\n    const versionId = new URLSearchParams(location.search).get('version') || 1;\n\n    const handleCalendarCardClick = (currDate) => {\n        sendNetworkLog('Clicked on: ' + currDate, currDate + ' card', '', versionId);\n        if (selectedDate === currDate) {\n            setSelectedDate('');\n        } else {\n            setSelectedDate(currDate);\n        }\n        setSelectedTime('');\n    }\n\n    return (\n        <>\n            <Card\n                sx={{justifyContent: 'center', minWidth: '60px', m: '5px'}}\n                style={{ border: \"none\", boxShadow: \"none\", backgroundColor: (currDate === selectedDate) ? '#CA1E1E': '#FFFFFF'}}>\n                <CardActionArea onClick={() => handleCalendarCardClick(currDate)}>\n                    <CardContent sx={{padding: '0'}}>\n                        <Grid direction=\"column\" container justify=\"center\" alignItems=\"center\" sx={{color: (currDate === selectedDate) ? '#FFFFFF': 'text.primary', flexShrink: 1}}>\n                            <Typography variant=\"h6\" gutterBottom> {currDate.split(' ')[0]}</Typography>\n                            <Typography gutterBottom>{day}</Typography>\n                        </Grid>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </>\n    );\n}\n\nexport default ScrollCalendarCardNew;"]},"metadata":{},"sourceType":"module"}